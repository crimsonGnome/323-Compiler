#include <algorithm>
#include <cctype>
#include <fstream>
#include <iostream>
#include <iterator>
#include <stack>
#include <string>
#include <vector>

using namespace std;
int identifierToIndex(string column){
    int identity = -1;
    char temp = column[0];
    // only check if size is greater then 1
    if(column.size() > 1){
        if(column == "program") return 25;
        if(column == "var") return 26;
        if(column == "begin") return 27;
        if(column == "end.") return 28;
        if(column == "interger") return 29;
        if(column == "print") return 30;
        if(column == "\"value=\"") return 31;
    }

    if(temp < 48){
        if(temp == '$') return 32;
        if(temp == '-') return 0;
        if(temp == '+') return 1;
        if(temp == '/') return 2;
        if(temp == '*') return 3;
        if(temp == '(') return 7;
        if(temp == ')') return 8;
        if(temp == ',') return 6;
    }
    if(48 <= temp && temp < 64 ){
        if(temp == ';') return 4;
        if(temp == ':') return 5;
        if(temp == '=') return 9;
        if(temp == '0') return 15;
        if(temp == '1') return 16;
        if(temp == '2') return 17;
        if(temp == '3') return 18;
        if(temp == '4') return 19;
        if(temp == '5') return 20;
        if(temp == '6') return 21;
        if(temp == '7') return 22;
        if(temp == '8') return 23;
        if(temp == '9') return 24;
    }
    if(64 <= temp && temp < 96){
        if(temp == 'P') return 33;
        if(temp == 'I') return 34;
        if(temp == 'A') return 35;
        if(temp == 'B') return 36;
        if(temp == 'D') return 37;
        if(temp == 'Y') return 38;
        if(temp == 'C') return 39;
        if(temp == 'S') return 40;
        if(temp == 'W') return 41;
        if(temp == 'V') return 42;
        if(temp == 'G') return 43;
        if(temp == 'E') return 44;
        if(temp == 'T') return 45;
        if(temp == 'F') return 46;
        if(temp == 'N') return 47;
        if(temp == 'M') return 48;
        if(temp == 'H') return 49;
        if(temp == 'O') return 50;
        if(temp == 'X') return 51;
    }

    if(temp >= 96){
        if(temp == 'a') return 10;
        if(temp == 'b') return 11;
        if(temp == 'c') return 12;
        if(temp == 'd') return 13;
        if(temp == 'f') return 14;
    }    
    return identity;
}

std::pair<int, char> cardinality(char R){
    std::pair<int, char>  identity;
    int temp = R - '0';
    if(temp < 10){
       switch(R){
        case '2':
          identity.first = 2;
          identity.second = 'I';
          break;
        case '3':
          identity.first = 1;
          identity.second = 'I';
          break;
        case '4':
          identity.first = 3;
          identity.second = 'A';
          break;
        case '5':
          identity.first = 1;
          identity.second = 'A';
          break;
        case '6':
          identity.first = 2;
          identity.second = 'M';
          break;
        case '7':
          identity.first = 1;
          identity.second = 'M';
          break;
        case '8':
          identity.first = 2;
          identity.second = 'A';
          break;
        case '9':
          identity.first = 1;
          identity.second = 'A';
          break;
        default:
          identity.first = 1;
          identity.second = 'A';
          break;
        } 
    }
    if(10 <= temp && temp < 20){
        switch(R){
        case '10':
          identity.first = 4;
          identity.second = 'B';
          break;
        case '11':
          identity.first = 3;
          identity.second = 'D';
          break;
        case '12':
          identity.first = 1;
          identity.second = 'D';
          break;
        case '13':
          identity.first = 3;
          identity.second = 'I';
          break;
        case '14':
          identity.first = 1;
          identity.second = 'F';
          break;
        case '15':
          identity.first = 1;
          identity.second = 'Y';
          break;
        case '16':
          identity.first = 2;
          identity.second = 'C';
          break;
        case '17':
          identity.first = 1;
          identity.second = 'C';
          break;
        case '18':
          identity.first = 1;
          identity.second = 'S';
          break;
        case '19':
          identity.first = 1;
          identity.second = 'S';
          break;
        default:
          identity.first = 7;
          identity.second = 'W';
          break;
        }
    }
    if(20 <= temp && temp < 30){
        switch(R){
        case '20':
          identity.first = 7;
          identity.second = 'W';
          break;
        case '21':
          identity.first = 5;
          identity.second = 'W';
          break;
        case '22':
          identity.first = 1;
          identity.second = 'V';
          break;
        case '23':
          identity.first = 3;
          identity.second = 'E';
          break;
        case '24':
          identity.first = 3;
          identity.second = 'E';
          break;
        case '25':
          identity.first = 1;
          identity.second = 'E';
          break;
        case '26':
          identity.first = 3;
          identity.second = 'T';
          break;
        case '27':
          identity.first = 3;
          identity.second = 'T';
          break;
        case '28':
          identity.first = 1;
          identity.second = 'T';
          break;
        case '29':
          identity.first = 1;
          identity.second = 'F';
          break;
        default:
          identity.first = 1;
          identity.second = 'W';
          break;
        }
    }
    if(30 <= temp && temp <= 35){
        switch(R){
        case '30':
          identity.first = 2;
          identity.second = 'N';
          break;
        case '31':
          identity.first = 1;
          identity.second = 'N';
          break;
        case '32':
          identity.first = 3;
          identity.second = 'E';
          break;
        case '33':
          identity.first = 1;
          identity.second = 'H';
          break;
        case '34':
          identity.first = 1;
          identity.second = 'H';
          break;
        case '35':
          identity.first = 1;
          identity.second = 'E';
          break;
        default:
          identity.first = 1;
          identity.second = 'W';
          break;
        }
    }
    if(36 <= temp && temp < 44){
        identity.first = 1;
        identity.second = 'O';
    }
    if(45 <= temp && temp < 49){
        identity.first = 1;
        identity.second = 'X';
    }
    
    
    return identity;
}


bool trace(vector<string> input,vector<vector<string>> parsingTable){
    stack<string> theStack;
    bool RFlag = false;
    char rFlagStored;
    unsigned int i = 0;
    
    // push initial condition
    theStack.push("0");
    while( i < input.size()){
        cout << theStack.top() << " theStack.top() \n";
        int row = std::stoi(theStack.top());
        theStack.pop();
        
        // Choose column Identifer
        string columnIdentifier = input[i];

        if (RFlag){
            RFlag = false;
            columnIdentifier = rFlagStored;
        }

        // convert char to column index;
        int column = identifierToIndex(columnIdentifier);
        
        

        string result = parsingTable[row][column];
        //cout << "row/column [" << row << "," << column << "] result "<< result << endl;
        // Reject if got an empty state
        if(result == "") return false;
        // Read state
        if(result[0] == 'S'){
            theStack.push(std::to_string(row));
            theStack.push(columnIdentifier);
            string temp = result.substr(1, result.size());
            theStack.push(temp);
            ++i;
            continue;
        } else if(result[0] == 'R'){
            theStack.push(to_string(row));
            std::pair<int, char> cardinalityResult = cardinality(result[1]);
            // setting popped Items 
            int popItems = cardinalityResult.first * 2;
            while(popItems > 0){
                theStack.pop();
                --popItems;
            }
            rFlagStored = cardinalityResult.second;
            RFlag = true;
            continue;

        } else if (result[0] == 'A'){
            return true;
        } else {
            // TODO: same code as abovve if it works I will combine the steps
            theStack.push(to_string(row));
            theStack.push(columnIdentifier);
            theStack.push(result);
            continue;
        }

        
    }
}
int main(){
    // get data
    ifstream file ("finalp1.txt");
    ofstream finalp2 ("finalp2.txt");
    // store the 
    vector<string> final2;
    string input;
    string inputTemp;
    string temp;
    string finalTextString;

    bool commentFlag = false;

    // while(getline(file, input)){  
    //     // TODO: whtie Space elimnator after comments are taken out.

    //     // Step 1 Remove all the white space from the beginning of the string
    //     int counter = 0;
    //     string temp, newString;
    //     // remove front white space in the beginning 
    //     for(auto i = input.begin(); i != input.end(); ++i){
    //         if(isspace(*i)){
    //             ++counter;
    //         } else {
    //             break;
    //         }
    //     }
    //     temp = input.substr(counter, input.size());
        
    //     // step 2 check if their is a comment code
    //     if(temp[0] == '*' && temp[1] == '*') commentFlag = !commentFlag;
    //     // if comment Flag is true, dont add line
    //     // it then searches to find the next chunck of comment to then start writing code
    //     if(commentFlag){
    //         // destroy comment section
    //         counter = 2;
    //         for(auto i = temp.begin()+ 2; i != temp.end(); ++i){
    //             if(i == (temp.end() -1)){
    //                 ++counter;
    //                 break;
    //             } 
    //             if(*i == '*' && *(i + 1) == '*'){ 
    //                 ++counter;
    //                 ++counter;
    //                 commentFlag = !commentFlag;
    //                 break;
    //             }
    //             ++counter;
    //         }
    //         newString = temp.substr(counter, temp.size());
    //         if(newString.empty()) continue;
    //      } else {
    //         // if comments are on first line remove those 2 comments 
    //         if(temp[0] == '*' && temp[1] == '*') {
    //             // remove whtie space
    //             if(isspace(temp[3])){
    //                 temp = temp.substr(3, temp.size()-1);
    //             } else {
    //                 temp = temp.substr(2, temp.size()-1);
    //             }
    //         }
    //      }


    //     // loop over rest of string to find white spaces and remove 
    //     for(auto i = temp.begin(); i != temp.end(); ++i){
    //         if(i == (temp.end() -1)){
    //             newString.push_back(*i);
    //             break;
    //         } 
    //         if(isspace(*i) && isspace(*(i+1))) continue;
    //         if(*i == '*' && *(i+1) == '*'){
    //             commentFlag = !commentFlag;
    //             ++i;
    //         } else if(!commentFlag){
    //             newString.push_back(*i);
    //         }
            


    //     // loop over strings that have comments in it

    //      }
        
    //     if(!newString.empty()){
    //         finalTextString.append(newString);
    //         finalp2 << newString << endl;
    //     }

    // }
    while(file >> input){
        inputTemp.append(input);
    }
    cout << inputTemp << endl;
    for(auto i = inputTemp.begin(); i != inputTemp.end(); ++i){
        if(i == (inputTemp.end() -1)){
            finalTextString.push_back(*i);
            break;
        }
        if(*i == '*' && *(i+1)== '*'){
            commentFlag = !commentFlag;
            ++i;
            continue; 
        }
        if(!commentFlag){
           finalTextString.push_back(*i);  
        }
    }
    vector<string> inputVector;
    bool contains_program = false;
    bool contains_var = false;
    bool contains_begin = false;
    bool contains_end = false;
    bool contains_interger= false;
    bool contains_print = false;
    input.clear();
    input = finalTextString;
    
    // for loop to blow up text
    temp = input.substr(0, 7);
    if(temp == "program"){
        contains_program = !contains_program;
        inputVector.push_back(temp);
    } else {
        cout << "Does not contain program"
    }
    // preparing the textfile;
    for(auto i = input.begin()+ 7; i != input.end(); ++i){
        // if its close to the end of the sting start checking these
        if(i == (input.end() -7)){
            if(!contains_var){
                if(i == (input.end() -2)){
                    cout << "Does not contain var";
                    return 0;
                }
            }
            if(!contains_begin){
                if(i == (input.end() -4)){
                    cout << "Does not contain begin";
                    return 0;
                }
            }
            if(!contains_end){
                if(i == (input.end() -3)){
                    cout << "Does not contain end.";
                    return 0;
                }
            }
            if(!contains_print){
                if(i == (input.end() -4)){
                    cout << "Does not contain print";
                    return 0;
                }
            }
            if(!contains_interger){
                if(i == (input.end() -2)){
                    cout << "Does not contain interger";
                    return 0;
                }
            }
        }
        
        if(*i == 'v' && *(i+1)== 'a' && *(i+2)== 'r') {
            inputVector.push_back("var");
            if(!contains_print) contains_print = !contains_print;
            advance(i,2);
            continue;
        }
        if(*i == 'p' && *(i+1)== 'r' && *(i+2)== 'i' && *(i+3)== 'n'&& *(i+4)== 't') {
            inputVector.push_back("print");
            if(!contains_print) contains_print = !contains_print;
            advance(i,4);
            continue;
        }
        if(*i == 'b' && *(i+1)== 'e' && *(i+2)== 'g' && *(i+3)== 'i' && *(i+4)== 'n') {
            inputVector.push_back("begin");
            if(!contains_begin) contains_begin = !contains_begin;
            advance(i,4);
            continue;
        }
        if(*i == '"' && *(i+1)== 'v' && *(i+2)== 'a' && *(i+3)== 'l' && *(i+4)== 'u' && *(i+5)== 'e' && *(i+6)== '"') {
            inputVector.push_back("\"value\"");
            advance(i,6);
            continue;
        }
        if(*i == 'i' && *(i+1)== 'n' && *(i+2)== 't' && *(i+3)== 'e' && *(i+4)== 'g' && *(i+5)== 'e' && *(i+6)== 'r') {
            inputVector.push_back("integer");
            advance(i,6);
            continue;
        }
        temp.clear();
        temp += *i;

        inputVector.push_back(temp);


    }

    cout << finalTextString;
    finalp2.close();
    return 0;
    // ======================== End of Section 1 ================================
    // ======================== Start of section 2 ==============================
    input.clear();
    ifstream file2 ("finalp2.txt");
    vector<string> inputVector;

    // getting fomated file into vector
    while(file2 >> input){ 
        inputVector.push_back(input);
        cout << input << endl;
    }
    inputVector.push_back(input);

    
    // Parsing table 
    vector<vector<string>> parsingTable{
            {"S23","S24","","","","","","S22","","","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","S1","","","","S6","S11","S13","","","5","","","3","","","8","9","","10","14","15","17","18","21","20","3","2"},
            {"","","","","","","","","","","S35","S36","S37","S38","S39","","","","","","","","","","","","","","","","","","","","76","","","","","","","","","","","","","","","","","12"},
            {"R3","R3","R3","R3","R3","R3","R3","","R3","R3","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","","40","","","","","","","","","","","","","","","7","16"},
            {"R9","R9","R9","R9","R9","R9","R9","","R9","R9","","","","","","","","","","","","","","","","","","","","","","","","","","41","","","","","","","","","","","","","42","","3","16"},
            {"","","","","S43","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R14","R14","R14","R14","R14","R12","S44","","R14","S45","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","R15","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","R15","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","S35","S36","S37","S38","S39","","","","","","","","","","","","","","R17","","S11","","","","82","","","","","46","8","9","","10","","","","","","","","12"},
            {"","","","","","","","","","","R18","R18","R18","R18","R18","","","","","","","","","","","","","","R18","","R18","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","R19","R19","R19","R19","R19","","","","","","","","","","","","","","R19","","R19","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","S47","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R3","R3","R3","R3","R3","R3","R3","","R3","R3","","","","","","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","","75","","","","","","","","","","","","","","","7","16"},
            {"","","","","R22","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"S49","S48","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R25","R25","S51","S50","R25","","","","R25","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R5","R5","R5","R5","R5","R5","R5","","R5","R5","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","","70","","","","","","","","","","","","","","","7","16"},
            {"R28","R28","R28","R28","R28","","","","R28","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R29","R29","R29","R29","R29","","","","R29","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R14","R14","R14","R14","R14","","","","R14","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","","","","","","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","","","","","","","","","","","","","","","","","74",""},
            {"R31","R31","R31","R31","R31","","","","R31","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"S23","S24","","","","","","S22","","","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","19","","","","","","","","","","53","15","17","18","21","20","74","12"},
            {"","","","","","","","","","","","","","","","R33","R33","R33","R33","R33","R33","R33","R33","R33","R33","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","","","","","","R34","R34","R34","R34","R34","R34","R34","R34","R34","R34","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R35","R35","R35","R35","R35","R35","R35","","R35","R35","R35","R35","R35","R35","R35","R35","R35","R35","R35","R35","R35","R35","R35","R35","R35","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R36","R36","R36","R36","R36","R36","R36","","R36","R36","R36","R36","R36","R36","R36","R36","R36","R36","R36","R36","R36","R36","R36","R36","R36","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R37","R37","R37","R37","R37","R37","R37","","R37","R37","R37","R37","R37","R37","R37","R37","R37","R37","R37","R37","R37","R37","R37","R37","R37","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R38","R38","R38","R38","R38","R38","R38","","R38","R38","R38","R38","R38","R38","R38","R38","R38","R38","R38","R38","R38","R38","R38","R38","R38","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R39","R39","R39","R39","R39","R39","R39","","R39","R39","R39","R39","R39","R39","R39","R39","R39","R39","R39","R39","R39","R39","R39","R39","R39","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R40","R40","R40","R40","R40","R40","R40","","R40","R40","R40","R40","R40","R40","R40","R40","R40","R40","R40","R40","R40","R40","R40","R40","R40","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R41","R41","R41","R41","R41","R41","R41","","R41","R41","R41","R41","R41","R41","R41","R41","R41","R41","R41","R41","R41","R41","R41","R41","R41","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R42","R42","R42","R42","R42","R42","R42","","R42","R42","R42","R42","R42","R42","R42","R42","R42","R42","R42","R42","R42","R42","R42","R42","R42","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R43","R43","R43","R43","R43","R43","R43","","R43","R43","R43","R43","R43","R43","R43","R43","R43","R43","R43","R43","R43","R43","R43","R43","R43","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R44","R44","R44","R44","R44","R44","R44","","R44","R44","R44","R44","R44","R44","R44","R44","R44","R44","R44","R44","R44","R44","R44","R44","R44","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R45","R45","R45","R45","R45","R45","R45","","R45","R45","R45","R45","R45","R45","R45","R45","R45","R45","R45","R45","R45","R45","R45","R45","R45","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R46","R46","R46","R46","R46","R46","R46","","R46","R46","R46","R46","R46","R46","R46","R46","R46","R46","R46","R46","R46","R46","R46","R46","R46","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R47","R47","R47","R47","R47","R47","R47","","R47","R47","R47","R47","R47","R47","R47","R47","R47","R47","R47","R47","R47","R47","R47","R47","R47","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R48","R48","R48","R48","R48","R48","R48","","R48","R48","R48","R48","R48","R48","R48","R48","R48","R48","R48","R48","R48","R48","R48","R48","R48","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R49","R49","R49","R49","R49","R49","R49","","R49","R49","R49","R49","R49","R49","R49","R49","R49","R49","R49","R49","R49","R49","R49","R49","R49","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R2","R2","R2","R2","R2","R2","R2","","R2","R2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R8","R8","R8","R8","R8","R8","R8","","R8","R8","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R6","R6","R6","R6","R6","","","","R6","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","S6","","","","","","","","","53","","","","","","","","","","","","",""},
            {"","","","","","","","","","","S35","S36","S37","S38","S39","","","","","","","","","","","","","","","","","","","","71","","","54","","","","","","","","","","","","","","12"},
            {"S23","S24","","","","","","S22","","","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","19","","","","","","","","","","55","15","17","18","21","20","74","12"},
            {"","","","","","","","","","","","","","","","","","","","","","","","","","","","","R16","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","S35","S36","S37","S38","S39","","","","","","","","","","","","","","","","","S13","","","57","","","","","","","","56","","","","","","","","","12"},
            {"S23","S24","","","","","","S22","","","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","19","","","","","","","","","","58","15","17","18","21","20","74","12"},
            {"S23","S24","","","","","","S22","","","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","19","","","","","","","","","","59","15","17","18","21","20","74","12"},
            {"S23","S24","","","","","","S22","","","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","19","","","","","","","","","","","","60","18","21","20","74","12"},
            {"S23","S24","","","","","","S22","","","S35","S36","S37","S38","S39","S25","S26","S27","S28","S29","S30","S31","S32","S33","S34","","","","","","","","","","19","","","","","","","","","","","","61","18","21","20","74","12"},
            {"R30","R30","R30","R30","R30","","","","R30","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","S69","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","R11","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"S49","S48","","","R68","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","S62","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","S63","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"S49","S48","","","R23","","","","R23","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"S49","S48","","","R24","","","","R24","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R26","R26","R26","R26","R26","","","","R26","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R27","R27","R27","R27","R27","","","","R27","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","S35","S36","S37","S38","S39","","","","","","","","","","","","","","","","","","","","64","","","","","","","","","","","","","","","","","12"},
            {"","","","","S65","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","S66","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","R21","R21","R21","R21","R21","","","","","","","","","","","","","","R21","","R21","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","S67","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","R20","R20","R20","R20","R20","","","","","","","","","","","","","","R20","","R20","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","R13","R13","R13","R13","R13","","","","","","","","","","","","","","R13","","R13","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","","","","","","","","","","","","","","","","","","R10","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R4","R4","R4","R4","R4","R4","R4","","R4","R4","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","R12","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","44","","","","","","","","","","","","","",""},
            {"S49","S48","","","","","","","S73","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R32","R32","R32","R32","R32","","","","R32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"R6","R6","R6","R6","R6","","","","R6","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","42","","",""},
            {"R2","R2","R2","R2","R2","R2","R2","","R2","R2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","S77","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","","","","","","","","","","","","","","","","","S78","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","S35","S36","S37","S38","S39","","","","","","","","","","","","","","","","","","","","71","","79","4","","","","","","","","","","","","","","12"},
            {"","","","","","","","","","","","","","","","","","","","","","","","","","","","S81","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","","","","","","","","","","","","","","","","","","","S83","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","S35","S36","S37","S38","S39","","","","","","","","","","","","","","","","S11","","","","82","","","","","80","8","9","","10","","","","","","","","12"},
            {"","","","","","","","","","S45","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""},
            {"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ACC","","","","","","","","","","","","","","","","","","",""},
    };



    // Section 1
    return 0;
}